<script>
import {
    withHooks,
    useState,
    useEffect,
    useMemo,
    useCallback,
    useInstance,
    useShow,
    usePullDownRefresh,
    useShareAppMessage,
    useShareTimeline,
    useAddToFavorites,
    usePageScroll,
    useTabItemTap,
    useReachBottom,
    useParams,
    useRef
} from "@wxa/hooks";
import { router } from "@wxa/core";

function creatMusic(song) {
    let innerAudioContext = wx.createInnerAudioContext();
    innerAudioContext.autoplay = false;
    innerAudioContext.src = song.src;
    return innerAudioContext;
}

withHooks(
    ({ song, songList }) => {
        let [showBtnPause, setShowBtnPause] = useState(false);
        let [seconds, setSeconds] = useState(0);
        let [curSong, setCurSong] = useState(song);
        let [curIndex, setCurIndex] = useState(0);
        let [totalSeconds, setTotalSeconds] = useState(0);
        let [playStatus, setPlayStatus] = useState("none");
        let musicRef = useRef();
        let timerRef = useRef();

        useMemo(
            () => {
                let index = songList.findIndex(
                    item => item.song_id === song.song_id
                );
                console.log('-------------1-------------');
                setCurIndex(index);
                console.log('-------------2-------------');
                setCurSong(song);
            },
            [song]
        );

        useEffect(
            () => {

                if (!song) {
                    return;
                }

                console.log("---playSong---", curSong);
                musicRef.current = creatMusic(curSong);
                setPlayStatus("new");
                musicRef.current.onCanplay(() => {
                    let intervalID = setInterval(function() {
                        console.log("onCanplay", musicRef.current.duration);
                        if (musicRef.current.duration !== 0) {
                            setTotalSeconds(
                                Math.ceil(musicRef.current.duration)
                            );
                            setPlayStatus("play");
                            clearInterval(intervalID);
                        }
                    }, 500);
                });

                return () => {
                    musicRef.current.destroy();
                };
            },
            [curSong]
        );

        useEffect(
            () => {
                handleSongStatus(playStatus);
            },
            [playStatus]
        );

        useShow(() => {
            console.log("---------player-show------");
        });

        function handleSongStatus(playStatus) {
            if (!musicRef.current) {
                return;
            }

            switch (playStatus) {
                case "new":
                    setSeconds(0);
                    setTotalSeconds(0);
                    setShowBtnPause(false);
                    clearInterval(timerRef.current);

                    break;
                case "play":
                    musicRef.current.play();
                    setShowBtnPause(false);

                    clearInterval(timerRef.current);

                    timerRef.current = setInterval(() => {
                        setSeconds(pre => {
                            if (pre >= totalSeconds) {
                                setPlayStatus("pause");
                                return pre;
                            }
                            return pre + 1;
                        });
                    }, 1000);
                    break;
                case "pause":
                    musicRef.current.pause();
                    setShowBtnPause(true);

                    clearInterval(timerRef.current);
                    break;
                case "continue":
                    musicRef.current.play();
                    setShowBtnPause(false);

                    timerRef.current = setInterval(() => {
                        setSeconds(pre => {
                            if (pre >= totalSeconds) {
                                setPlayStatus("pause");
                                return pre;
                            }
                            return pre + 1;
                        });
                    }, 1000);
                default:
                    break;
            }
        }

        function play(params) {
            setPlayStatus("continue");
        }

        function pause(params) {
            setPlayStatus("pause");
        }

        function checkSwitchSong(pre) {
            if (!songList.length || songList.length === 1) {
                wx.showToast({
                    title: "没有可播放歌曲",
                    icon: "none",
                    duration: 1500,
                    mask: true
                });

                return false;
            }

            if (pre) {
                if (curIndex === 0) {
                    wx.showToast({
                        title: "已经第一首了",
                        icon: "none",
                        duration: 1500,
                        mask: true
                    });

                    return false;
                }

                return true;
            }

            if (curIndex === songList.length - 1) {
                wx.showToast({
                    title: "已经最后一首了",
                    icon: "none",
                    duration: 1500,
                    mask: true
                });

                return false;
            }

            return true;
        }

        function pre(params) {
            if (!checkSwitchSong(true)) {
                return;
            }

            let preIndex = curIndex - 1;
            setCurIndex(preIndex);
            setCurSong(songList[preIndex]);
        }

        function next(params) {
            if (!checkSwitchSong(false)) {
                return;
            }

            let nextIndex = curIndex + 1;
            setCurIndex(nextIndex);
            setCurSong(songList[nextIndex]);
        }

        return {
            data: { song: curSong, showBtnPause, seconds, totalSeconds },
            methods: {
                play,
                pause,
                pre,
                next
            }
        };
    },
    {
        properties: {
            song: {
                type: Object,
                value: null
            },
            songList: {
                type: Array,
                value: []
            }
        },
        options: {
            addGlobalClass: true
        }
    }
);
</script>

<config>
{
    "component": true,
    "usingComponents":{
    }
}
</config>

<template>
    <view
        class="m-playbar m-playbar-unlock"
        wx:if="{{song}}"
    >
        <view class="wrap">
            <view class="btns">
                <image
                    src="/assets/images/next.png"
                    class="pre small-btn"
                    bindtap="pre"
                    style="transform: rotate(180deg);"
                ></image>
                <view class="play-or-pause">
                    <image
                        wx:if="{{showBtnPause}}"
                        bindtap="play"
                        src="/assets/images/pause.png"
                        class="pause big-btn"
                    ></image>
                    <image
                        wx:if="{{!showBtnPause}}"
                        bindtap="pause"
                        src="/assets/images/play.png"
                        class="play big-btn"
                    ></image>
                </view>
                <image
                    src="/assets/images/next.png"
                    class="next small-btn"
                    bindtap="next"
                ></image>
            </view>

            <text class="">{{seconds}}</text>
            <text
                class=""
            > / {{totalSeconds}}</text>

            <text style="margin-left: 50rpx">{{song.title}} </text>
        </view>
    </view>
</template>

<style lang="scss">
.m-playbar {
    padding: 20rpx 40rpx;
    box-shadow: 0 2px 10px 0 rgba(0, 0, 0, 0.2);
    background: rgb(235, 235, 235);
    width: 100%;
    position: fixed;
    bottom: 0;
    width: 100%;
    z-index: 100;
}

.btns {
    display: flex;
    align-items: center;
    .small-btn {
        width: 50rpx;
        height: 50rpx;
        margin-right: 16rpx;
    }

    .big-btn {
        width: 80rpx;
        height: 80rpx;
        margin-right: 16rpx;
    }
}
</style>
